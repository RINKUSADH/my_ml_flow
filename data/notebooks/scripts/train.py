# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AefEIsQNkHFUDirJXV7BvgI8qpuc0UDB
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import mlflow
import mlflow.sklearn

with mlflow.start_run():
    with mlflow.start_run(nested = True):
        pay_data = pd.read_csv("Salary_Data.csv")
        pay_data

        pay_data.info()
        pay_data.describe()

        """DATA VISUALIZATION"""

        sns.jointplot(x='YearsExperience',y='Salary',data=pay_data)
        #sns.jointplot(x='YearsExperience',y='Salary',data=pay_data,kind='reg')

        """Divide data into inputs and outputs"""

        X = pay_data.iloc[:,:-1]
        X

        Y=pay_data.iloc[:,1]
        Y

        """Splitting data into training set and test set"""

        from sklearn.model_selection import train_test_split
        X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=0)
        #when random state set to an integer
        #train_test_split will return sam result for each execution

        len(X_train)

        """****Linear Regression****
        
        Fitting simple LR to the training set
        """

        from sklearn.linear_model import LinearRegression

        ls=LinearRegression()
        ls.fit(X_train,Y_train)

        """Prediction"""

        y_pred=ls.predict(X_test)
        y_pred
        plt.scatter(X_test,Y_test,color='red',label='Actual')
        plt.plot(X_test,y_pred,'b',label='predicted')
        plt.legend()
        plt.show()

        ls.intercept_

        ls.coef_

        ls.predict([[9.8]])

        """Above model predict after training"""

        SCORE=ls.score(X_test,Y_test)
        mlflow.end_run()
        

    with mlflow.start_run(nested = True):
        """REGRESSION PERFORMANCE"""
        pay_data = pd.read_csv("Salary_Data.csv")
        pay_data

        X = pay_data.iloc[:, :-1]
        X

        Y = pay_data.iloc[:, 1]
        Y

        from sklearn import metrics
        MAE=metrics.mean_absolute_error(Y_test,y_pred)
        MSE=metrics.mean_absolute_error(Y_test,y_pred)
        RMSE=np.sqrt(metrics.mean_absolute_error(Y_test,y_pred))

        # Log parameters, metrics, and model
        mlflow.log_param("depth", 3)
        mlflow.log_metric("mae", MAE)
        mlflow.log_metric("mse", MSE)
        mlflow.log_metric("rmse", RMSE)
        mlflow.log_metric("score", SCORE)
        mlflow.sklearn.log_model(ls, "linear_regression_model")

        """**Random Forest**"""

        from sklearn.model_selection import train_test_split
        X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state = 4)

        len(X_train)

        from sklearn.ensemble import RandomForestRegressor
        reg=RandomForestRegressor(n_estimators=10,random_state=8)
        reg.fit(X_train,y_train)
        predrf=reg.predict(X_test)
        predrf

        from sklearn import metrics
        MAE1=metrics.mean_absolute_error(y_test,predrf)
        MSE1=metrics.mean_squared_error(y_test,predrf)
        RMSE1=np.sqrt(metrics.mean_absolute_error(y_test,predrf))

        SCORE1 = reg.score(X_test,y_test)

        results = pd.DataFrame({'Actual': y_test, 'Predicted': predrf})

        # Plotting the results
        plt.figure(figsize=(10,6))
        sns.scatterplot(x="Actual", y="Predicted", data=results)
        plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
        plt.title('Random Forest Regression')
        plt.xlabel('Years of Experience')
        plt.ylabel('Salary')
        plt.show()

        # Log parameters, metrics, and model
        mlflow.log_param("depth", 3)
        mlflow.log_metric("mae1", MAE1)
        mlflow.log_metric("mse2", MSE1)
        mlflow.log_metric("rmse3", RMSE1)
        mlflow.log_metric("score4", SCORE1)
        mlflow.sklearn.log_model(reg, "random_forest_model")

